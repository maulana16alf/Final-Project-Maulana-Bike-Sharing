# -*- coding: utf-8 -*-
"""Proyek_Analisis_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Frli3Hs2DJh-qcSmP_Elt-_zgV4n02xh

# Proyek Analisis Data: Bike Sharing Dataset
- **Nama:** Maulana Arif
- **Email:** m004d4ky1604@bangkit.academy
- **ID Dicoding:** maulana357_arif

## Menentukan Pertanyaan Bisnis

1. How is the trend of bikesharing usage by registered and casual users?
2. What is the peak season of bikesharing usage?
3. Is there a correlation between humidity and the number of bike sharing users?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

days_df = pd.read_csv("https://raw.githubusercontent.com/maulana16alf/Final-Project-Maulana-Bike-Sharing/main/Data%20Processing/raw_data_day.csv")
days_df.head()

"""### Assessing Data"""

days_df.info()

"""The dateday column is still stated as object. We have to convert it into a date"""

days_df.isna().sum()

"""There is no NaN or missing value in the dataset"""

print("Jumlah duplikasi: ", days_df.duplicated().sum())

"""There is no dupplicated value in the dataset"""

days_df.describe()

"""### Cleaning Data"""

datetime_columns = ["dteday"]

for column in datetime_columns:
  days_df[column] = pd.to_datetime(days_df[column])

"""Convert all dateday column data into a datetime format"""

days_df.info()

def season_convertion(season):
    season_index = {
        1:'Winter',
        2:'Spring',
        3:'Summer',
        4:'Fall'}
    return season_index.get(season)

season_list = []

for season in days_df['season']:
    season = season_convertion(season)
    season_list.append(season)

days_df['season'] = season_list

"""Change the column 'season' by using season index information"""

days_df.head(5)

days_df['yr'] = days_df['dteday'].dt.year

"""Convert name of year which stated in number into the name of based on the dateday column"""

days_df.head(5)

days_df['weekday'] = days_df['dteday'].dt.day_name()

"""Convert name of day which stated in number into the name of based on the dateday column"""

days_df.head(5)

days_df['mnth'] = days_df['dteday'].dt.month_name()

"""Convert name of month which stated in number into the name of based on the dateday column"""

days_df.head(5)

days_df['temp'] = days_df['temp']*41
days_df['atemp'] = days_df['atemp']*50
days_df['hum'] = days_df['hum']*100
days_df['windspeed'] = days_df['windspeed']*67

"""Convert the normalized data into an actual data"""

days_df.head(5)

days_df.to_csv("cleaned_days.csv", index=False)

"""As we have done cleaning the data, we can import the cleaned data into the folder

## Exploratory Data Analysis (EDA)

### Explore ...
"""

days_df.describe(include="all")

print(days_df.shape)

"""
Based on the data shape exploration, we can retreive such informations as below:
1.   days_df contains in total of 731 rows
2.   days_df contains in total of 16 columns

"""

days_df.dtypes

cleaned_days_df = pd.read_csv("cleaned_days.csv")
cleaned_days_df.head()

"""Import the cleaned data sheets as we move on to the exploratory phase of data wrangling"""

cleaned_days_df.groupby(by=["yr", "season", "mnth"]).agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum",
    "dteday": "first"
}).reset_index().sort_values(by=["dteday"], ascending=[True])

"""The grouped data shows summed up:
1.   Count of each month registered and casual users of bake sharing system in 2011 and 2012.
2.   Seasonal data of bike sharing users

## Visualization & Explanatory Analysis

Here are some questions which will be used as the guidance to analyze the cleaned data sheet:
1. How is the trend of bikesharing usage by registered and casual users?
2. What is the peak season of bikesharing usage?
3. Is there a correlation between humidity and the number of bike sharing users?

### Pertanyaan 1: How is the trend of bikesharing usage by registered and casual users?

Make resample table to show each month counted users data
"""

cleaned_days_df['dteday'] = pd.to_datetime(cleaned_days_df['dteday'])

monthly_users_df = cleaned_days_df.resample(rule='M', on='dteday').agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum"
})

monthly_users_df.head(24)

monthly_users_df = cleaned_days_df.resample(rule='M', on='dteday').agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum"
})

monthly_users_df.index = pd.to_datetime(monthly_users_df.index)
monthly_users_df.index = monthly_users_df.index.strftime('%b-%y')
monthly_users_df = monthly_users_df.reset_index()
monthly_users_df = monthly_users_df.rename(columns={'dteday': 'month-year'})

monthly_users_df.head(5)

"""Make a monthly table by adding additional information, such as sum of casual, registered, and overall users count"""

type_users_df = cleaned_days_df.resample(rule='M', on='dteday').agg({
    "casual": "mean",
    "registered": "mean",
    'cnt': "mean"
})

type_users_df.index = pd.to_datetime(type_users_df.index)
type_users_df.index = type_users_df.index.strftime('%b-%y')
type_users_df = type_users_df.reset_index()
type_users_df = type_users_df.rename(columns={'dteday': 'month-year'})

type_users_df["%casual"] = (type_users_df["casual"]/type_users_df["cnt"])*100
type_users_df["%registered"] = (type_users_df["registered"]/type_users_df["cnt"])*100

type_users_df.head(5)

"""Adding column of casual-overall ratio and registered-overall ratio"""

plt.figure(figsize=(16,6))

# Create a line plot using the sns.lineplot() function
sns.lineplot(x="month-year", y="casual", data=monthly_users_df, label='Casual')
sns.lineplot(x="month-year", y="registered", data=monthly_users_df, label='Registered')

# Add labels and a title to the plot
plt.xlabel("Date")
plt.ylabel("Total Rides")
plt.title("Monthly count of casual and registered bikeshare rides (2011-2012)")

# Add a legend to the plot
plt.legend(loc='upper right', fontsize=14)

# Show the plot
plt.tight_layout()
plt.show()

"""Make a graph which shown the monthly casual-overall ratio and monthly registered-overall ratio over time"""

plt.figure(figsize=(16,6))

# Create a line plot using the sns.lineplot() function
sns.lineplot(x="month-year", y="%casual", data=type_users_df, label='Casual')

# Add labels and a title to the plot
plt.xlabel("Date")
plt.ylabel("Ratio (%)")
plt.title("Ratio of casual to sum of all bikeshare rides (2011-2012)")

# Add a legend to the plot
plt.legend(loc='upper right', fontsize=14)

# Show the plot
plt.tight_layout()
plt.show()

"""Create a graph of casual-registered users of each month to know the comparison between number of casual and registered users

Insight:
1.   The overall data of registered and casual users of bake sharing system shows similar pattern over two year period of 2011-2012.
2.   But, the ratio of is very low between December 2011 until February 2012 simultenously with the reduction of overall bike share usage

### Pertanyaan 2: What is the peak season of bikesharing usage?
"""

seasonal_users_df = cleaned_days_df.groupby(by="season").agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum",
}).reset_index().sort_values(by=["season"], ascending=[True])

seasonal_users_df.head(5)

sns.set(style="whitegrid")
plt.figure(figsize=(12, 5))

sns.barplot(x='season',
            y='cnt',
            data=seasonal_users_df,
            palette="viridis")

# Customize the plot
plt.title('Histogram of Users Count by Season')
plt.xlabel('Season')
plt.ylabel('Count of Users')

"""Insight:
1.   The peak season of bike share usage is during Summer Season and the lowest is during winter season
2.   There is major difference between number of users in winter season compared to others

### Pertanyaan 3: Is there a correlation between humidity and the number of bike sharing users?
"""

plt.figure(figsize=(14,6))

sns.scatterplot(x='hum', y='cnt', data=cleaned_days_df, hue='season')

plt.xlabel("Humidity (%)")
plt.ylabel("Number of Users")
plt.title("Correlation of active Users related to Humidity of the Season")

# Show the plot
plt.tight_layout()
plt.show()

"""Insight:
1.   The scatter plot above shows if there's no significant relation between humidity and the number of active users
2.   Most likely, people are tend to use bike share when the humidity in condition betweeen 40% to 90%

## Conclusion

- How is the trend of bikesharing usage by registered and casual users?
> 1. The overall data of registered and casual users of bake sharing system shows similar pattern over two year period of 2011-2012.
> 2. But, the ratio of is very low between December 2011 until February 2012 simultenously with the reduction of overall bike share usage
> 3. In conclusion, both casual and registerd users show a positive growth over two years analysis. While, every winter show the reduction of bike share users (in range of November to January)
- What is the peak season of bikesharing usage?
> The peak season of bike share usage is during Summer Season and the lowest is during winter season
- Is there a correlation between humidity and the number of bike sharing users?
> 1. The scatter plot above shows if there's no significant relation between humidity and the number of active users due to separation of the data
> 2. Besides, people are tend to use bike share when the humidity in condition betweeen 40% to 90% in every season
"""



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency
sns.set(style='dark')

st.subheader('Bike Share Trend')

col1, col2 = st.columns(2)

# Chart 1 - Monthly count of casual and registered bikeshare rides
with col1:
    fig, ax = plt.subplots(figsize=(16, 6))

    # Create line plots using sns.lineplot
    sns.lineplot(x="month-year", y="casual", data=monthly_users_df, label='Casual')
    sns.lineplot(x="month-year", y="registered", data=monthly_users_df, label='Registered')

    # Customize the plot
    ax.set_xlabel("Date")
    ax.set_ylabel("Total Rides")
    ax.set_title("Monthly count of casual and registered bikeshare rides (2011-2012)", loc="center", fontsize=20)
    ax.tick_params(axis='x', labelsize=15)
    ax.tick_params(axis='y', labelsize=15)
    plt.legend(loc='upper right', fontsize=10)

    # Show the plot using st.pyplot
    st.pyplot(fig)

# Chart 2 - Ratio of casual to sum of all bikeshare rides
with col2:
    fig, ax = plt.subplots(figsize=(16, 6))

    # Create line plot for the ratio
    sns.lineplot(x="month-year", y="%casual", data=type_users_df, label='Casual')

    # Customize the plot
    ax.set_xlabel("Date")
    ax.set_ylabel("Ratio (%)")
    ax.set_title("Ratio of casual to sum of all bikeshare rides (2011-2012)", loc="center", fontsize=20)
    ax.tick_params(axis='x', labelsize=15)
    ax.tick_params(axis='y', labelsize=15)
    plt.legend(loc='upper right', fontsize=10)

    # Show the plot using st.pyplot
    st.pyplot(fig)

st.subheader('Bike Share Seasonal Trend Usage')

sns.set(style="whitegrid")
fig, ax = plt.subplots(figsize=(12, 5))

sns.barplot(x='season',
            y='cnt',
            data=seasonal_users_df,
            palette="viridis")

# Customize the plot
ax.set_title('Histogram of Users Count by Season')
ax.set_xlabel('Season')
ax.set_ylabel('Count of Users')
ax.tick_params(axis='y', labelsize=20)
ax.tick_params(axis='x', labelsize=15)

# Show the plot
st.pyplot(fig)

st.subheader('Correlation Environmental Condition to Bike Share Usage')

fig, ax = plt.subplots(figsize=(14,6))

sns.scatterplot(x='hum', y='cnt', data=cleaned_days_df, hue='season')

ax.set_xlabel("Humidity (%)")
ax.set_ylabel("Number of Users")
ax.set_title("Correlation of active Users related to Humidity of the Season")
ax.tick_params(axis='y', labelsize=20)
ax.tick_params(axis='x', labelsize=15)

# Show the plot
st.pyplot(fig)